AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "descripcion del stack"

Parameters:
  FUNCTIONNAME:
    Description: "Nombre de la funcion"
    Type: String
  S3BUCKET:
    Description: "Nombre del bucket de S3"
    Type: String
  SRCCODE:
    Description: "Ubicacion del codigo lambda"
    Type: String
  DBSCRTMANAGER:
    Description: "Nombre del registro en el secret manager"
    Type: String
  PARAMSTORENAME:
    Description: "Nombre del registro en el parameter store"
    Type: String
  COGNITOARN:
    Description: "ARN del cognito ARN"
    Type: String
Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref FUNCTIONNAME
      FailOnWarnings: true
  ApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt [ ApiGateway, RootResourceId ]
      PathPart: "{proxy+}"

  ApiGatewayProxyMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: "AWS_PROXY"
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}:production/invocations
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway

  ApiGateWayProxyMethodCorsOption:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationHttpMethod: POST
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway

  ApiGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref ApiGateway
  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: iprovider
    DependsOn:
      - ApiGatewayProxyMethod

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Ref FUNCTIONNAME
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Ref COGNITOARN
      RestApiId: !Ref ApiGateway

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref FUNCTIONNAME
      Handler: com.example.lambdajavatemplate.lambda.Handler::handleRequest
      Runtime: java11
      #AutoPublishAlias: production
      SnapStart:
        ApplyOn: PublishedVersions
      MemorySize: 2048
#      VpcConfig:
#        SecurityGroupIds:
#          - sg-81503bf3
#        SubnetIds:
#          - subnet-b3cc2cce
#          - subnet-87a208ec
#          - subnet-e1d79fad
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
          CONFIGURATION_NAME: !Ref PARAMSTORENAME
      Timeout: 120
      CodeUri:
        Bucket: !Ref S3BUCKET
        Key: !Ref SRCCODE
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: arn:aws:secretsmanager:us-east-2:432499991508:secret:iprovider_saas_dev_java-fEVWnV
        - SSMParameterReadPolicy:
            ParameterName: dev/template/config
#      Events:
#        ApiGW:
#          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
#          Properties:
#            Path: /{proxy+}
#            Method: ANY
  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
  LambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      FunctionVersion: !GetAtt LambdaVersion.Version
      Name: production
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Principal: "apigateway.amazonaws.com"
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaAlias
      #FunctionName: !GetAtt LambdaFunction.Arn
      #FunctionName: !Sub
      #  - '${FUNCNAME}:production'
      #  - FUNCNAME: !Ref FUNCTIONNAME
      SourceArn: !Join [ "", [ 'arn:aws:execute-api:', !Ref 'AWS::Region', ":", !Ref 'AWS::AccountId', ":", !Ref 'ApiGateway', "/*/*/*", ] ]


Outputs:
  RootUrl:
    Description: "Url principal del servicio de iprovider"
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/iprovider/